from typing import Any, ClassVar

from typing import overload
import Boost.Python
import rdkit.rdBase
_BCUT2D_version: str
_CalcAUTOCORR2D_version: str
_CalcAUTOCORR3D_version: str
_CalcAsphericity_version: str
_CalcChi0n_version: str
_CalcChi0v_version: str
_CalcChi1n_version: str
_CalcChi1v_version: str
_CalcChi2n_version: str
_CalcChi2v_version: str
_CalcChi3n_version: str
_CalcChi3v_version: str
_CalcChi4n_version: str
_CalcChi4v_version: str
_CalcChiNn_version: str
_CalcChiNv_version: str
_CalcCoulombMat_version: str
_CalcCrippenDescriptors_version: str
_CalcEMMcharges_version: str
_CalcEccentricity_version: str
_CalcExactMolWt_version: str
_CalcFractionCSP3_version: str
_CalcGETAWAY_version: str
_CalcHallKierAlpha_version: str
_CalcInertialShapeFactor_version: str
_CalcKappa1_version: str
_CalcKappa2_version: str
_CalcKappa3_version: str
_CalcLabuteASA_version: str
_CalcMORSE_version: str
_CalcMolFormula_version: str
_CalcMolWt_version: str
_CalcNPR1_version: str
_CalcNPR2_version: str
_CalcNumAliphaticCarbocycles_version: str
_CalcNumAliphaticHeterocycles_version: str
_CalcNumAliphaticRings_version: str
_CalcNumAmideBonds_version: str
_CalcNumAromaticCarbocycles_version: str
_CalcNumAromaticHeterocycles_version: str
_CalcNumAromaticRings_version: str
_CalcNumAtomStereoCenters_version: str
_CalcNumAtoms_version: str
_CalcNumBridgeheadAtoms_version: str
_CalcNumHBA_version: str
_CalcNumHBD_version: str
_CalcNumHeavyAtoms_version: str
_CalcNumHeteroatoms_version: str
_CalcNumHeterocycles_version: str
_CalcNumLipinskiHBA_version: str
_CalcNumLipinskiHBD_version: str
_CalcNumRings_version: str
_CalcNumRotatableBonds_version: str
_CalcNumSaturatedCarbocycles_version: str
_CalcNumSaturatedHeterocycles_version: str
_CalcNumSaturatedRings_version: str
_CalcNumSpiroAtoms_version: str
_CalcNumUnspecifiedAtomStereoCenters_version: str
_CalcPBF_version: str
_CalcPMI1_version: str
_CalcPMI2_version: str
_CalcPMI3_version: str
_CalcPhi_version: str
_CalcRDF_version: str
_CalcRadiusOfGyration_version: str
_CalcSpherocityIndex_version: str
_CalcTPSA_version: str
_CalcWHIM_version: str
_ConnectivityInvariants_version: str
_FeatureInvariants_version: str
_GetAtomFeatures_version: str
_MorganFingerprint_version: str

class AtomPairsParameters(Boost.Python.instance):
    atomTypes: ClassVar[rdkit.rdBase._vectunsigned int] = ...
    codeSize: ClassVar[int] = ...
    numAtomPairFingerprintBits: ClassVar[int] = ...
    numBranchBits: ClassVar[int] = ...
    numChiralBits: ClassVar[int] = ...
    numPathBits: ClassVar[int] = ...
    numPiBits: ClassVar[int] = ...
    numTypeBits: ClassVar[int] = ...
    version: ClassVar[str] = ...
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class NumRotatableBondsOptions(Boost.Python.enum):
    Default: ClassVar[NumRotatableBondsOptions] = ...
    NonStrict: ClassVar[NumRotatableBondsOptions] = ...
    Strict: ClassVar[NumRotatableBondsOptions] = ...
    StrictLinkages: ClassVar[NumRotatableBondsOptions] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class Properties(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AnnotateProperties(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def ComputeProperties(cls, *args, **kwargs) -> Any: ...
    def GetAvailableProperties(self, *args, **kwargs) -> Any: ...
    def GetProperty(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropertyNames(cls, classRDKit) -> Any: ...
    def RegisterProperty(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class PropertyFunctor(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetName(cls, structRDKit) -> Any: ...
    @classmethod
    def GetVersion(cls, structRDKit) -> Any: ...
    @classmethod
    def __call__(cls, structRDKit, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class PropertyRangeQuery(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def Match(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class PythonPropertyFunctor(PropertyFunctor):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __call__(cls, struct `anonymousnamespace', classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

@overload
def BCUT2D(classRDKit) -> Any: ...
@overload
def BCUT2D(classRDKit, classboost) -> Any: ...
@overload
def BCUT2D(classRDKit, classboost) -> Any: ...
def CalcAUTOCORR2D(classRDKit) -> Any: ...
def CalcAUTOCORR3D(classRDKit) -> Any: ...
def CalcAsphericity(classRDKit) -> Any: ...
def CalcChi0n(classRDKit) -> Any: ...
def CalcChi0v(classRDKit) -> Any: ...
def CalcChi1n(classRDKit) -> Any: ...
def CalcChi1v(classRDKit) -> Any: ...
def CalcChi2n(classRDKit) -> Any: ...
def CalcChi2v(classRDKit) -> Any: ...
def CalcChi3n(classRDKit) -> Any: ...
def CalcChi3v(classRDKit) -> Any: ...
def CalcChi4n(classRDKit) -> Any: ...
def CalcChi4v(classRDKit) -> Any: ...
def CalcChiNn(*args, **kwargs) -> Any: ...
def CalcChiNv(*args, **kwargs) -> Any: ...
def CalcCoulombMat(classRDKit) -> Any: ...
def CalcCrippenDescriptors(classRDKit) -> Any: ...
def CalcEEMcharges(classRDKit) -> Any: ...
def CalcEccentricity(classRDKit) -> Any: ...
def CalcExactMolWt(classRDKit) -> Any: ...
def CalcFractionCSP3(classRDKit) -> Any: ...
def CalcGETAWAY(classRDKit) -> Any: ...
def CalcHallKierAlpha(classRDKit) -> Any: ...
def CalcInertialShapeFactor(classRDKit) -> Any: ...
def CalcKappa1(classRDKit) -> Any: ...
def CalcKappa2(classRDKit) -> Any: ...
def CalcKappa3(classRDKit) -> Any: ...
def CalcLabuteASA(classRDKit) -> Any: ...
def CalcMORSE(classRDKit) -> Any: ...
def CalcMolFormula(classRDKit) -> Any: ...
def CalcNPR1(classRDKit) -> Any: ...
def CalcNPR2(classRDKit) -> Any: ...
def CalcNumAliphaticCarbocycles(classRDKit) -> Any: ...
def CalcNumAliphaticHeterocycles(classRDKit) -> Any: ...
def CalcNumAliphaticRings(classRDKit) -> Any: ...
def CalcNumAmideBonds(classRDKit) -> Any: ...
def CalcNumAromaticCarbocycles(classRDKit) -> Any: ...
def CalcNumAromaticHeterocycles(classRDKit) -> Any: ...
def CalcNumAromaticRings(classRDKit) -> Any: ...
def CalcNumAtomStereoCenters(classRDKit) -> Any: ...
def CalcNumAtoms(classRDKit) -> Any: ...
def CalcNumBridgeheadAtoms(classRDKit) -> Any: ...
def CalcNumHBA(classRDKit) -> Any: ...
def CalcNumHBD(classRDKit) -> Any: ...
def CalcNumHeavyAtoms(classRDKit) -> Any: ...
def CalcNumHeteroatoms(classRDKit) -> Any: ...
def CalcNumHeterocycles(classRDKit) -> Any: ...
def CalcNumLipinskiHBA(classRDKit) -> Any: ...
def CalcNumLipinskiHBD(classRDKit) -> Any: ...
def CalcNumRings(classRDKit) -> Any: ...
@overload
def CalcNumRotatableBonds(classRDKit, bool) -> Any: ...
@overload
def CalcNumRotatableBonds(classRDKit) -> Any: ...
def CalcNumSaturatedCarbocycles(classRDKit) -> Any: ...
def CalcNumSaturatedHeterocycles(classRDKit) -> Any: ...
def CalcNumSaturatedRings(classRDKit) -> Any: ...
def CalcNumSpiroAtoms(classRDKit) -> Any: ...
def CalcNumUnspecifiedAtomStereoCenters(classRDKit) -> Any: ...
def CalcPBF(classRDKit) -> Any: ...
def CalcPMI1(classRDKit) -> Any: ...
def CalcPMI2(classRDKit) -> Any: ...
def CalcPMI3(classRDKit) -> Any: ...
def CalcPhi(classRDKit) -> Any: ...
def CalcRDF(classRDKit) -> Any: ...
def CalcRadiusOfGyration(classRDKit) -> Any: ...
def CalcSpherocityIndex(classRDKit) -> Any: ...
def CalcTPSA(classRDKit) -> Any: ...
def CalcWHIM(classRDKit) -> Any: ...
def CustomProp_VSA_(*args, **kwargs) -> Any: ...
def GetAtomFeatures(*args, **kwargs) -> Any: ...
def GetAtomPairAtomCode(classRDKit) -> Any: ...
def GetAtomPairCode(*args, **kwargs) -> Any: ...
def GetAtomPairFingerprint(classRDKit) -> Any: ...
def GetConnectivityInvariants(classRDKit) -> Any: ...
def GetFeatureInvariants(classRDKit) -> Any: ...
def GetHashedAtomPairFingerprint(classRDKit) -> Any: ...
def GetHashedAtomPairFingerprintAsBitVect(classRDKit) -> Any: ...
def GetHashedMorganFingerprint(*args, **kwargs) -> Any: ...
def GetHashedTopologicalTorsionFingerprint(classRDKit) -> Any: ...
def GetHashedTopologicalTorsionFingerprintAsBitVect(classRDKit) -> Any: ...
def GetMACCSKeysFingerprint(classRDKit) -> Any: ...
def GetMorganFingerprint(*args, **kwargs) -> Any: ...
def GetMorganFingerprintAsBitVect(*args, **kwargs) -> Any: ...
def GetTopologicalTorsionFingerprint(classRDKit) -> Any: ...
def GetUSR(classRDKit) -> Any: ...
def GetUSRCAT(classRDKit) -> Any: ...
def GetUSRDistributions(classboost) -> Any: ...
def GetUSRDistributionsFromPoints(*args, **kwargs) -> Any: ...
def GetUSRFromDistributions(classboost) -> Any: ...
def GetUSRScore(*args, **kwargs) -> Any: ...
def MQNs_(classRDKit) -> Any: ...
def MakePropertyRangeQuery(*args, **kwargs) -> Any: ...
def PEOE_VSA_(classRDKit) -> Any: ...
def SMR_VSA_(classRDKit) -> Any: ...
def SlogP_VSA_(classRDKit) -> Any: ...
def _CalcCrippenContribs(classRDKit) -> Any: ...
def _CalcLabuteASAContribs(classRDKit) -> Any: ...
def _CalcMolWt(classRDKit) -> Any: ...
def _CalcTPSAContribs(classRDKit) -> Any: ...
