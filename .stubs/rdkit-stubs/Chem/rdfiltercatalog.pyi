from typing import Any, ClassVar

import Boost.Python

class ExclusionList(FilterMatcherBase):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AddPattern(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetExclusionPatterns(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class FilterCatalog(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AddEntry(cls, classRDKit) -> Any: ...
    @classmethod
    def GetEntry(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetEntryWithIdx(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetFilterMatches(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetFirstMatch(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetMatches(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetNumEntries(cls, classRDKit) -> Any: ...
    @classmethod
    def HasMatch(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def RemoveEntry(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def Serialize(cls, classRDKit) -> Any: ...
    @classmethod
    def __getinitargs__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class FilterCatalogEntry(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def ClearProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetDescription(cls, classRDKit) -> Any: ...
    @classmethod
    def GetFilterMatches(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropList(cls, classRDKit) -> Any: ...
    @classmethod
    def HasFilterMatch(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def IsValid(cls, classRDKit) -> Any: ...
    @classmethod
    def Serialize(cls, classRDKit) -> Any: ...
    @classmethod
    def SetDescription(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class FilterCatalogEntryList(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def append(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(cls, other) -> Any: ...
    @classmethod
    def __delitem__(cls, other) -> Any: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls, structboost, classstd) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @classmethod
    def __setitem__(cls, index, object) -> Any: ...

class FilterCatalogListOfEntryList(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def append(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(cls, other) -> Any: ...
    @classmethod
    def __delitem__(cls, other) -> Any: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @classmethod
    def __setitem__(cls, index, object) -> Any: ...

class FilterCatalogParams(Boost.Python.instance):
    class FilterCatalogs(Boost.Python.enum):
        ALL: ClassVar[FilterCatalogs] = ...
        BRENK: ClassVar[FilterCatalogs] = ...
        NIH: ClassVar[FilterCatalogs] = ...
        PAINS: ClassVar[FilterCatalogs] = ...
        PAINS_A: ClassVar[FilterCatalogs] = ...
        PAINS_B: ClassVar[FilterCatalogs] = ...
        PAINS_C: ClassVar[FilterCatalogs] = ...
        ZINC: ClassVar[FilterCatalogs] = ...
        names: ClassVar[dict] = ...
        values: ClassVar[dict] = ...
        __slots__: ClassVar[tuple] = ...
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AddCatalog(cls, classRDKit, enumRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class FilterHierarchyMatcher(FilterMatcherBase):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AddChild(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetPattern(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class FilterMatch(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @property
    def atomPairs(self) -> Any: ...
    @property
    def filterMatch(self) -> Any: ...

class FilterMatcherBase(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetMatches(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetName(cls, classRDKit) -> Any: ...
    @classmethod
    def HasMatch(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def IsValid(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class IntPair(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    query: Any
    target: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MatchTypeVect(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def append(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(cls, other) -> Any: ...
    @classmethod
    def __delitem__(cls, other) -> Any: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @classmethod
    def __setitem__(cls, index, object) -> Any: ...

class MolList(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def append(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(cls, other) -> Any: ...
    @classmethod
    def __delitem__(cls, other) -> Any: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls, structboost, classstd) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @classmethod
    def __setitem__(cls, index, object) -> Any: ...

class PythonFilterMatcher(FilterMatcherBase):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class SmartsMatcher(FilterMatcherBase):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetMaxCount(cls, classRDKit) -> Any: ...
    @classmethod
    def GetMinCount(cls, classRDKit) -> Any: ...
    @classmethod
    def GetPattern(cls, classRDKit) -> Any: ...
    @classmethod
    def IsValid(cls, classRDKit) -> Any: ...
    @classmethod
    def SetMaxCount(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetMinCount(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetPattern(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class VectFilterMatch(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def append(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(cls, other) -> Any: ...
    @classmethod
    def __delitem__(cls, other) -> Any: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls, structboost, classstd) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @classmethod
    def __setitem__(cls, index, object) -> Any: ...

def FilterCatalogCanSerialize(*args, **kwargs) -> Any: ...
def GetFlattenedFunctionalGroupHierarchy(*args, **kwargs) -> Any: ...
def GetFunctionalGroupHierarchy() -> Any: ...
def RunFilterCatalog(*args, **kwargs) -> Any: ...
