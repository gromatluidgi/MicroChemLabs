from typing import Any, ClassVar

from typing import overload
import Boost.Python
ALLOW_CHARGE_SEPARATION: ResonanceFlags
ALLOW_INCOMPLETE_OCTETS: ResonanceFlags
AllProps: PropertyPickleOptions
AtomProps: PropertyPickleOptions
BondProps: PropertyPickleOptions
CHI_ALLENE: ChiralType
CHI_OCTAHEDRAL: ChiralType
CHI_OTHER: ChiralType
CHI_SQUAREPLANAR: ChiralType
CHI_TETRAHEDRAL: ChiralType
CHI_TETRAHEDRAL_CCW: ChiralType
CHI_TETRAHEDRAL_CW: ChiralType
CHI_TRIGONALBIPYRAMIDAL: ChiralType
CHI_UNSPECIFIED: ChiralType
COMPOSITE_AND: CompositeQueryType
COMPOSITE_OR: CompositeQueryType
COMPOSITE_XOR: CompositeQueryType
ComputedProps: PropertyPickleOptions
CoordsAsDouble: PropertyPickleOptions
KEKULE_ALL: ResonanceFlags
MolProps: PropertyPickleOptions
NoConformers: PropertyPickleOptions
NoProps: PropertyPickleOptions
PrivateProps: PropertyPickleOptions
QueryAtomData: PropertyPickleOptions
STEREO_ABSOLUTE: StereoGroupType
STEREO_AND: StereoGroupType
STEREO_OR: StereoGroupType
UNCONSTRAINED_ANIONS: ResonanceFlags
UNCONSTRAINED_CATIONS: ResonanceFlags

class Atom(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def ClearProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def DescribeQuery(cls, classRDKit) -> Any: ...
    @classmethod
    def GetAtomMapNum(cls, classRDKit) -> Any: ...
    @classmethod
    def GetAtomicNum(cls, classRDKit) -> Any: ...
    @classmethod
    def GetBonds(cls, classRDKit) -> Any: ...
    @classmethod
    def GetBoolProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetChiralTag(cls, classRDKit) -> Any: ...
    @classmethod
    def GetDegree(cls, classRDKit) -> Any: ...
    @classmethod
    def GetDoubleProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetExplicitBitVectProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetExplicitValence(cls, classRDKit) -> Any: ...
    @classmethod
    def GetFormalCharge(cls, classRDKit) -> Any: ...
    @classmethod
    def GetHybridization(cls, classRDKit) -> Any: ...
    @classmethod
    def GetIdx(cls, classRDKit) -> Any: ...
    @classmethod
    def GetImplicitValence(cls, classRDKit) -> Any: ...
    @classmethod
    def GetIntProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetIsAromatic(cls, classRDKit) -> Any: ...
    @classmethod
    def GetIsotope(cls, classRDKit) -> Any: ...
    @classmethod
    def GetMass(cls, classRDKit) -> Any: ...
    @classmethod
    def GetMonomerInfo(cls, classRDKit) -> Any: ...
    @classmethod
    def GetNeighbors(cls, classRDKit) -> Any: ...
    @classmethod
    def GetNoImplicit(cls, classRDKit) -> Any: ...
    @classmethod
    def GetNumExplicitHs(cls, classRDKit) -> Any: ...
    @classmethod
    def GetNumImplicitHs(cls, classRDKit) -> Any: ...
    @classmethod
    def GetNumRadicalElectrons(cls, classRDKit) -> Any: ...
    @classmethod
    def GetOwningMol(cls, classRDKit) -> Any: ...
    @classmethod
    def GetPDBResidueInfo(cls, classRDKit) -> Any: ...
    @classmethod
    def GetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropNames(cls, classRDKit) -> Any: ...
    @classmethod
    def GetPropsAsDict(cls, classRDKit) -> Any: ...
    @classmethod
    def GetQueryType(cls, classRDKit) -> Any: ...
    @classmethod
    def GetSmarts(cls, classRDKit) -> Any: ...
    @classmethod
    def GetSymbol(cls, classRDKit) -> Any: ...
    @classmethod
    def GetTotalDegree(cls, classRDKit) -> Any: ...
    @classmethod
    def GetTotalNumHs(cls, classRDKit) -> Any: ...
    @classmethod
    def GetTotalValence(cls, classRDKit) -> Any: ...
    @classmethod
    def GetUnsignedProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def HasOwningMol(cls, classRDKit) -> Any: ...
    @classmethod
    def HasProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def HasQuery(cls, classRDKit) -> Any: ...
    @classmethod
    def InvertChirality(cls, classRDKit) -> Any: ...
    @classmethod
    def IsInRing(cls, classRDKit) -> Any: ...
    @classmethod
    def IsInRingSize(cls, classRDKit, int) -> Any: ...
    @classmethod
    def Match(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def NeedsUpdatePropertyCache(cls, classRDKit) -> Any: ...
    @classmethod
    def SetAtomMapNum(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetAtomicNum(cls, classRDKit, int) -> Any: ...
    @classmethod
    def SetBoolProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetChiralTag(cls, classRDKit, enumRDKit) -> Any: ...
    @classmethod
    def SetDoubleProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetExplicitBitVectProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetFormalCharge(cls, classRDKit, int) -> Any: ...
    @classmethod
    def SetHybridization(cls, classRDKit, enumRDKit) -> Any: ...
    @classmethod
    def SetIntProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIsAromatic(cls, classRDKit, bool) -> Any: ...
    @classmethod
    def SetIsotope(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetMonomerInfo(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetNoImplicit(cls, classRDKit, bool) -> Any: ...
    @classmethod
    def SetNumExplicitHs(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetNumRadicalElectrons(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetPDBResidueInfo(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetUnsignedProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def UpdatePropertyCache(cls, classRDKit) -> Any: ...
    @classmethod
    def __copy__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class AtomKekulizeException(AtomSanitizeException): ...

class AtomMonomerInfo(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetMonomerType(cls, classRDKit) -> Any: ...
    @classmethod
    def GetName(cls, classRDKit) -> Any: ...
    @classmethod
    def SetMonomerType(cls, classRDKit, enumRDKit) -> Any: ...
    @classmethod
    def SetName(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class AtomMonomerType(Boost.Python.enum):
    OTHER: ClassVar[AtomMonomerType] = ...
    PDBRESIDUE: ClassVar[AtomMonomerType] = ...
    UNKNOWN: ClassVar[AtomMonomerType] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class AtomPDBResidueInfo(AtomMonomerInfo):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetAltLoc(cls, classRDKit) -> Any: ...
    @classmethod
    def GetChainId(cls, classRDKit) -> Any: ...
    @classmethod
    def GetInsertionCode(cls, classRDKit) -> Any: ...
    @classmethod
    def GetIsHeteroAtom(cls, classRDKit) -> Any: ...
    @classmethod
    def GetOccupancy(cls, classRDKit) -> Any: ...
    @classmethod
    def GetResidueName(cls, classRDKit) -> Any: ...
    @classmethod
    def GetResidueNumber(cls, classRDKit) -> Any: ...
    @classmethod
    def GetSecondaryStructure(cls, classRDKit) -> Any: ...
    @classmethod
    def GetSegmentNumber(cls, classRDKit) -> Any: ...
    @classmethod
    def GetSerialNumber(cls, classRDKit) -> Any: ...
    @classmethod
    def GetTempFactor(cls, classRDKit) -> Any: ...
    @classmethod
    def SetAltLoc(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetChainId(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetInsertionCode(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIsHeteroAtom(cls, classRDKit, bool) -> Any: ...
    @classmethod
    def SetOccupancy(cls, classRDKit, double) -> Any: ...
    @classmethod
    def SetResidueName(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetResidueNumber(cls, classRDKit, int) -> Any: ...
    @classmethod
    def SetSecondaryStructure(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetSegmentNumber(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetSerialNumber(cls, classRDKit, int) -> Any: ...
    @classmethod
    def SetTempFactor(cls, classRDKit, double) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class AtomSanitizeException(MolSanitizeException): ...

class AtomValenceException(AtomSanitizeException): ...

class Bond(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def ClearProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def DescribeQuery(cls, classRDKit) -> Any: ...
    @classmethod
    def GetBeginAtom(cls, classRDKit) -> Any: ...
    @classmethod
    def GetBeginAtomIdx(cls, classRDKit) -> Any: ...
    @classmethod
    def GetBondDir(cls, classRDKit) -> Any: ...
    @classmethod
    def GetBondType(cls, classRDKit) -> Any: ...
    @classmethod
    def GetBondTypeAsDouble(cls, classRDKit) -> Any: ...
    @classmethod
    def GetBoolProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetDoubleProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetEndAtom(cls, classRDKit) -> Any: ...
    @classmethod
    def GetEndAtomIdx(cls, classRDKit) -> Any: ...
    @classmethod
    def GetIdx(cls, classRDKit) -> Any: ...
    @classmethod
    def GetIntProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetIsAromatic(cls, classRDKit) -> Any: ...
    @classmethod
    def GetIsConjugated(cls, classRDKit) -> Any: ...
    @classmethod
    def GetOtherAtom(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetOtherAtomIdx(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetOwningMol(cls, classRDKit) -> Any: ...
    @classmethod
    def GetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropNames(cls, classRDKit) -> Any: ...
    @classmethod
    def GetPropsAsDict(cls, classRDKit) -> Any: ...
    @classmethod
    def GetSmarts(cls, classRDKit) -> Any: ...
    @classmethod
    def GetStereo(cls, classRDKit) -> Any: ...
    @classmethod
    def GetStereoAtoms(cls, classRDKit) -> Any: ...
    @classmethod
    def GetUnsignedProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetValenceContrib(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def HasOwningMol(cls, classRDKit) -> Any: ...
    @classmethod
    def HasProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def HasQuery(cls, classRDKit) -> Any: ...
    @classmethod
    def IsInRing(cls, classRDKit) -> Any: ...
    @classmethod
    def IsInRingSize(cls, classRDKit, int) -> Any: ...
    @classmethod
    def Match(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetBondDir(cls, classRDKit, enumRDKit) -> Any: ...
    @classmethod
    def SetBondType(cls, classRDKit, enumRDKit) -> Any: ...
    @classmethod
    def SetBoolProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetDoubleProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIntProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIsAromatic(cls, classRDKit, bool) -> Any: ...
    @classmethod
    def SetIsConjugated(cls, classRDKit, bool) -> Any: ...
    @classmethod
    def SetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetStereo(cls, classRDKit, enumRDKit) -> Any: ...
    @classmethod
    def SetStereoAtoms(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetUnsignedProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class BondDir(Boost.Python.enum):
    BEGINDASH: ClassVar[BondDir] = ...
    BEGINWEDGE: ClassVar[BondDir] = ...
    EITHERDOUBLE: ClassVar[BondDir] = ...
    ENDDOWNRIGHT: ClassVar[BondDir] = ...
    ENDUPRIGHT: ClassVar[BondDir] = ...
    NONE: ClassVar[BondDir] = ...
    UNKNOWN: ClassVar[BondDir] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class BondStereo(Boost.Python.enum):
    STEREOANY: ClassVar[BondStereo] = ...
    STEREOCIS: ClassVar[BondStereo] = ...
    STEREOE: ClassVar[BondStereo] = ...
    STEREONONE: ClassVar[BondStereo] = ...
    STEREOTRANS: ClassVar[BondStereo] = ...
    STEREOZ: ClassVar[BondStereo] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class BondType(Boost.Python.enum):
    AROMATIC: ClassVar[BondType] = ...
    DATIVE: ClassVar[BondType] = ...
    DATIVEL: ClassVar[BondType] = ...
    DATIVEONE: ClassVar[BondType] = ...
    DATIVER: ClassVar[BondType] = ...
    DOUBLE: ClassVar[BondType] = ...
    FIVEANDAHALF: ClassVar[BondType] = ...
    FOURANDAHALF: ClassVar[BondType] = ...
    HEXTUPLE: ClassVar[BondType] = ...
    HYDROGEN: ClassVar[BondType] = ...
    IONIC: ClassVar[BondType] = ...
    ONEANDAHALF: ClassVar[BondType] = ...
    OTHER: ClassVar[BondType] = ...
    QUADRUPLE: ClassVar[BondType] = ...
    QUINTUPLE: ClassVar[BondType] = ...
    SINGLE: ClassVar[BondType] = ...
    THREEANDAHALF: ClassVar[BondType] = ...
    THREECENTER: ClassVar[BondType] = ...
    TRIPLE: ClassVar[BondType] = ...
    TWOANDAHALF: ClassVar[BondType] = ...
    UNSPECIFIED: ClassVar[BondType] = ...
    ZERO: ClassVar[BondType] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class ChiralType(Boost.Python.enum):
    CHI_ALLENE: ClassVar[ChiralType] = ...
    CHI_OCTAHEDRAL: ClassVar[ChiralType] = ...
    CHI_OTHER: ClassVar[ChiralType] = ...
    CHI_SQUAREPLANAR: ClassVar[ChiralType] = ...
    CHI_TETRAHEDRAL: ClassVar[ChiralType] = ...
    CHI_TETRAHEDRAL_CCW: ClassVar[ChiralType] = ...
    CHI_TETRAHEDRAL_CW: ClassVar[ChiralType] = ...
    CHI_TRIGONALBIPYRAMIDAL: ClassVar[ChiralType] = ...
    CHI_UNSPECIFIED: ClassVar[ChiralType] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class CompositeQueryType(Boost.Python.enum):
    COMPOSITE_AND: ClassVar[CompositeQueryType] = ...
    COMPOSITE_OR: ClassVar[CompositeQueryType] = ...
    COMPOSITE_XOR: ClassVar[CompositeQueryType] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class Conformer(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def ClearComputedProps(cls, classRDKit) -> Any: ...
    @classmethod
    def ClearProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetAtomPosition(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetBoolProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetDoubleProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetId(cls, classRDKit) -> Any: ...
    @classmethod
    def GetIntProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetNumAtoms(cls, classRDKit) -> Any: ...
    @classmethod
    def GetOwningMol(cls, classRDKit) -> Any: ...
    @classmethod
    def GetPositions(cls, classRDKit) -> Any: ...
    @classmethod
    def GetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropNames(cls, classRDKit) -> Any: ...
    @classmethod
    def GetPropsAsDict(cls, classRDKit) -> Any: ...
    @classmethod
    def GetUnsignedProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def HasOwningMol(cls, classRDKit) -> Any: ...
    @classmethod
    def HasProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def Is3D(cls, classRDKit) -> Any: ...
    @classmethod
    def Set3D(cls, classRDKit, bool) -> Any: ...
    @overload
    @classmethod
    def SetAtomPosition(cls, classRDKit, unsignedint, classboost) -> Any: ...
    @overload
    @classmethod
    def SetAtomPosition(cls, classRDKit, unsignedint, classRDGeom) -> Any: ...
    @classmethod
    def SetBoolProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetDoubleProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetId(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetIntProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetUnsignedProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class EditableMol(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AddAtom(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def AddBond(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def BeginBatchEdit(cls, classRDKit) -> Any: ...
    @classmethod
    def CommitBatchEdit(cls, classRDKit) -> Any: ...
    @classmethod
    def GetMol(cls, classRDKit) -> Any: ...
    @classmethod
    def RemoveAtom(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def RemoveBond(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def ReplaceAtom(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def ReplaceBond(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def RollbackBatchEdit(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class FixedMolSizeMolBundle(MolBundle):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class HybridizationType(Boost.Python.enum):
    OTHER: ClassVar[HybridizationType] = ...
    S: ClassVar[HybridizationType] = ...
    SP: ClassVar[HybridizationType] = ...
    SP2: ClassVar[HybridizationType] = ...
    SP2D: ClassVar[HybridizationType] = ...
    SP3: ClassVar[HybridizationType] = ...
    SP3D: ClassVar[HybridizationType] = ...
    SP3D2: ClassVar[HybridizationType] = ...
    UNSPECIFIED: ClassVar[HybridizationType] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class KekulizeException(MolSanitizeException): ...

class Mol(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AddConformer(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def ClearComputedProps(cls, classRDKit) -> Any: ...
    @classmethod
    def ClearProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def Compute2DCoords(cls, classRDKit) -> Any: ...
    @classmethod
    def ComputeGasteigerCharges(cls, classRDKit) -> Any: ...
    @classmethod
    def Debug(cls, classRDKit) -> Any: ...
    @classmethod
    def GetAromaticAtoms(cls, classboost) -> Any: ...
    @classmethod
    def GetAtomWithIdx(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetAtoms(cls, classboost) -> Any: ...
    @classmethod
    def GetAtomsMatchingQuery(cls, classboost, classRDKit) -> Any: ...
    @classmethod
    def GetBondBetweenAtoms(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetBondWithIdx(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetBonds(cls, classboost) -> Any: ...
    @classmethod
    def GetBoolProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetConformer(cls, classRDKit) -> Any: ...
    @classmethod
    def GetConformers(cls, classboost) -> Any: ...
    @classmethod
    def GetDoubleProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetIntProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetNumAtoms(cls, classRDKit) -> Any: ...
    @classmethod
    def GetNumBonds(cls, classRDKit) -> Any: ...
    @classmethod
    def GetNumConformers(cls, classRDKit) -> Any: ...
    @classmethod
    def GetNumHeavyAtoms(cls, classRDKit) -> Any: ...
    @classmethod
    def GetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropNames(cls, classRDKit) -> Any: ...
    @classmethod
    def GetPropsAsDict(cls, classRDKit) -> Any: ...
    @classmethod
    def GetRingInfo(cls, classRDKit) -> Any: ...
    @classmethod
    def GetStereoGroups(cls, classRDKit) -> Any: ...
    @classmethod
    def GetSubstructMatch(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetSubstructMatches(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetUnsignedProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def HasProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def HasSubstructMatch(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def NeedsUpdatePropertyCache(cls, classRDKit) -> Any: ...
    @classmethod
    def RemoveAllConformers(cls, classRDKit) -> Any: ...
    @classmethod
    def RemoveConformer(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetBoolProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetDoubleProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIntProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetUnsignedProp(cls, *args, **kwargs) -> Any: ...
    @overload
    @classmethod
    def ToBinary(cls, classRDKit) -> Any: ...
    @overload
    @classmethod
    def ToBinary(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def UpdatePropertyCache(cls, classRDKit) -> Any: ...
    @classmethod
    def __copy__(cls, classboost) -> Any: ...
    @classmethod
    def __deepcopy__(cls) -> Any: ...
    @classmethod
    def __getinitargs__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MolBundle(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AddMol(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def GetMol(cls, classRDKit, unsigned__int64) -> Any: ...
    @classmethod
    def GetSubstructMatch(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetSubstructMatches(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def HasSubstructMatch(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def Size(cls, classRDKit) -> Any: ...
    @classmethod
    def __getitem__(cls, classRDKit, unsigned__int64) -> Any: ...
    @classmethod
    def __len__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MolSanitizeException(ValueError): ...

class PeriodicTable(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetAbundanceForIsotope(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetAtomicNumber(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetAtomicWeight(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetDefaultValence(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetElementName(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetElementSymbol(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetMassForIsotope(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetMostCommonIsotope(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetMostCommonIsotopeMass(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetNOuterElecs(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetRb0(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetRcovalent(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetRvdw(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetValenceList(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class PropertyPickleOptions(Boost.Python.enum):
    AllProps: ClassVar[PropertyPickleOptions] = ...
    AtomProps: ClassVar[PropertyPickleOptions] = ...
    BondProps: ClassVar[PropertyPickleOptions] = ...
    ComputedProps: ClassVar[PropertyPickleOptions] = ...
    CoordsAsDouble: ClassVar[PropertyPickleOptions] = ...
    MolProps: ClassVar[PropertyPickleOptions] = ...
    NoConformers: ClassVar[PropertyPickleOptions] = ...
    NoProps: ClassVar[PropertyPickleOptions] = ...
    PrivateProps: ClassVar[PropertyPickleOptions] = ...
    QueryAtomData: ClassVar[PropertyPickleOptions] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class QueryAtom(Atom):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def ExpandQuery(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetQuery(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class QueryBond(Bond):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def ExpandQuery(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetQuery(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class RWMol(Mol):
    __instance_size__: ClassVar[int] = ...
    __safe_for_unpickling__: ClassVar[bool] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AddAtom(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def AddBond(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def BeginBatchEdit(cls, classRDKit) -> Any: ...
    @classmethod
    def CommitBatchEdit(cls, classRDKit) -> Any: ...
    @classmethod
    def GetMol(cls, classRDKit) -> Any: ...
    @classmethod
    def InsertMol(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def RemoveAtom(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def RemoveBond(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def ReplaceAtom(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def ReplaceBond(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def RollbackBatchEdit(cls, classRDKit) -> Any: ...
    @classmethod
    def SetStereoGroups(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def __copy__(cls, classboost) -> Any: ...
    @classmethod
    def __deepcopy__(cls) -> Any: ...
    @classmethod
    def __enter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __getinitargs__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class ResonanceFlags(Boost.Python.enum):
    ALLOW_CHARGE_SEPARATION: ClassVar[ResonanceFlags] = ...
    ALLOW_INCOMPLETE_OCTETS: ClassVar[ResonanceFlags] = ...
    KEKULE_ALL: ClassVar[ResonanceFlags] = ...
    UNCONSTRAINED_ANIONS: ClassVar[ResonanceFlags] = ...
    UNCONSTRAINED_CATIONS: ClassVar[ResonanceFlags] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class ResonanceMolSupplier(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def Enumerate(cls, classRDKit) -> Any: ...
    @classmethod
    def GetAtomConjGrpIdx(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetBondConjGrpIdx(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetIsEnumerated(cls, classRDKit) -> Any: ...
    @classmethod
    def GetNumConjGrps(cls, classRDKit) -> Any: ...
    @classmethod
    def GetProgressCallback(cls, classRDKit) -> Any: ...
    @classmethod
    def GetSubstructMatch(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetSubstructMatches(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetNumThreads(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetProgressCallback(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def WasCanceled(cls, classRDKit) -> Any: ...
    @classmethod
    def atEnd(cls, classRDKit) -> Any: ...
    @classmethod
    def reset(cls, classRDKit) -> Any: ...
    @classmethod
    def __getitem__(cls, classRDKit, int) -> Any: ...
    @classmethod
    def __iter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __len__(cls, classRDKit) -> Any: ...
    @classmethod
    def __next__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class ResonanceMolSupplierCallback(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetMaxStructures(cls, classRDKit) -> Any: ...
    @classmethod
    def GetNumConjGrps(cls, classRDKit) -> Any: ...
    @classmethod
    def GetNumDiverseStructures(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetNumStructures(cls, classRDKit, unsignedint) -> Any: ...
    @overload
    @classmethod
    def __call__(cls, classRDKit) -> Any: ...
    @overload
    @classmethod
    def __call__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class RingInfo(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AddRing(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def AreAtomsInSameRing(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def AreAtomsInSameRingOfSize(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def AreBondsInSameRing(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def AreBondsInSameRingOfSize(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def AreRingFamiliesInitialized(cls, classRDKit) -> Any: ...
    @classmethod
    def AtomMembers(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def AtomRingFamilies(cls, classRDKit) -> Any: ...
    @classmethod
    def AtomRingSizes(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def AtomRings(cls, classRDKit) -> Any: ...
    @classmethod
    def BondMembers(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def BondRingFamilies(cls, classRDKit) -> Any: ...
    @classmethod
    def BondRingSizes(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def BondRings(cls, classRDKit) -> Any: ...
    @classmethod
    def IsAtomInRingOfSize(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def IsBondInRingOfSize(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def MinAtomRingSize(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def MinBondRingSize(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def NumAtomRings(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def NumBondRings(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def NumRelevantCycles(cls, classRDKit) -> Any: ...
    @classmethod
    def NumRingFamilies(cls, classRDKit) -> Any: ...
    @classmethod
    def NumRings(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class StereoDescriptor(Boost.Python.enum):
    Bond_Cis: ClassVar[StereoDescriptor] = ...
    Bond_Trans: ClassVar[StereoDescriptor] = ...
    NoValue: ClassVar[StereoDescriptor] = ...
    Tet_CCW: ClassVar[StereoDescriptor] = ...
    Tet_CW: ClassVar[StereoDescriptor] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class StereoGroup(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetAtoms(cls, classRDKit) -> Any: ...
    @classmethod
    def GetGroupType(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class StereoGroupType(Boost.Python.enum):
    STEREO_ABSOLUTE: ClassVar[StereoGroupType] = ...
    STEREO_AND: ClassVar[StereoGroupType] = ...
    STEREO_OR: ClassVar[StereoGroupType] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class StereoGroup_vect(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def append(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(cls, other) -> Any: ...
    @classmethod
    def __delitem__(cls, other) -> Any: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls, structboost, classstd) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @classmethod
    def __setitem__(cls, index, object) -> Any: ...

class StereoInfo(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    centeredOn: Any
    descriptor: Any
    permutation: Any
    specified: Any
    type: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @property
    def NOATOM(self) -> Any: ...
    @property
    def controllingAtoms(self) -> Any: ...

class StereoSpecified(Boost.Python.enum):
    Specified: ClassVar[StereoSpecified] = ...
    Unknown: ClassVar[StereoSpecified] = ...
    Unspecified: ClassVar[StereoSpecified] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class StereoType(Boost.Python.enum):
    Atom_Octahedral: ClassVar[StereoType] = ...
    Atom_SquarePlanar: ClassVar[StereoType] = ...
    Atom_Tetrahedral: ClassVar[StereoType] = ...
    Atom_TrigonalBipyramidal: ClassVar[StereoType] = ...
    Bond_Atropisomer: ClassVar[StereoType] = ...
    Bond_Cumulene_Even: ClassVar[StereoType] = ...
    Bond_Double: ClassVar[StereoType] = ...
    Unspecified: ClassVar[StereoType] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class SubstanceGroup(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AddAtomWithBookmark(cls, classRDKit, int) -> Any: ...
    @classmethod
    def AddAtomWithIdx(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def AddAttachPoint(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def AddBondWithBookmark(cls, classRDKit, int) -> Any: ...
    @classmethod
    def AddBondWithIdx(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def AddBracket(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def AddCState(cls, classRDKit, unsignedint, classRDGeom) -> Any: ...
    @classmethod
    def AddParentAtomWithBookmark(cls, classRDKit, int) -> Any: ...
    @classmethod
    def AddParentAtomWithIdx(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def ClearAttachPoints(cls, classRDKit) -> Any: ...
    @classmethod
    def ClearBrackets(cls, classRDKit) -> Any: ...
    @classmethod
    def ClearCStates(cls, classRDKit) -> Any: ...
    @classmethod
    def ClearProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetAtoms(cls, classRDKit) -> Any: ...
    @classmethod
    def GetAttachPoints(cls, classRDKit) -> Any: ...
    @classmethod
    def GetBonds(cls, classRDKit) -> Any: ...
    @classmethod
    def GetBoolProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetBrackets(cls, classRDKit) -> Any: ...
    @classmethod
    def GetCStates(cls, classRDKit) -> Any: ...
    @classmethod
    def GetDoubleProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetIndexInMol(cls, classRDKit) -> Any: ...
    @classmethod
    def GetIntProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetOwningMol(cls, classRDKit) -> Any: ...
    @classmethod
    def GetParentAtoms(cls, classRDKit) -> Any: ...
    @classmethod
    def GetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropNames(cls, classRDKit) -> Any: ...
    @classmethod
    def GetPropsAsDict(cls, classRDKit) -> Any: ...
    @classmethod
    def GetStringVectProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetUnsignedProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def GetUnsignedVectProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def HasProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetAtoms(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def SetBonds(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def SetBoolProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetDoubleProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIntProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetParentAtoms(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def SetProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetUnsignedProp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class SubstanceGroupAttach(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @property
    def aIdx(self) -> Any: ...
    @property
    def id(self) -> Any: ...
    @property
    def lvIdx(self) -> Any: ...

class SubstanceGroupCState(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @property
    def bondIdx(self) -> Any: ...
    @property
    def vector(self) -> Any: ...

class SubstanceGroup_VECT(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def append(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(cls, other) -> Any: ...
    @classmethod
    def __delitem__(cls, other) -> Any: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls, structboost, classstd) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @classmethod
    def __setitem__(cls, index, object) -> Any: ...

class SubstructMatchParameters(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    aromaticMatchesConjugated: Any
    maxMatches: Any
    numThreads: Any
    recursionPossible: Any
    uniquify: Any
    useChirality: Any
    useEnhancedStereo: Any
    useGenericMatchers: Any
    useQueryQueryMatches: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def setExtraFinalCheck(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class _ROAtomSeq(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __next__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class _ROBondSeq(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __next__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class _ROConformerSeq(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __next__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class _ROQAtomSeq(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __next__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class _cppAtomKekulizeException(_cppMolSanitizeException):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetAtomIndices(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class _cppAtomSanitizeException(_cppMolSanitizeException):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetAtomIdx(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class _cppAtomValenceException(_cppAtomSanitizeException):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class _cppMolSanitizeException(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetType(cls, classRDKit) -> Any: ...
    @classmethod
    def Message(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class _listclass RDKit::Atom * __ptr64(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __contains__(cls, other) -> Any: ...
    @classmethod
    def __delitem__(cls, other) -> Any: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls, structboost, classstd) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @classmethod
    def __setitem__(cls, index, object) -> Any: ...

class _listclass RDKit::Bond * __ptr64(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __contains__(cls, other) -> Any: ...
    @classmethod
    def __delitem__(cls, other) -> Any: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls, structboost, classstd) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @classmethod
    def __setitem__(cls, index, object) -> Any: ...

class _listclass boost::shared_ptr<class RDKit::Conformer>(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __contains__(cls, other) -> Any: ...
    @classmethod
    def __delitem__(cls, other) -> Any: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls, structboost, classstd) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @classmethod
    def __setitem__(cls, index, object) -> Any: ...

def AddMolSubstanceGroup(*args, **kwargs) -> Any: ...
def ClearMolSubstanceGroups(classRDKit) -> Any: ...
def CreateMolDataSubstanceGroup(*args, **kwargs) -> Any: ...
def CreateMolSubstanceGroup(*args, **kwargs) -> Any: ...
def CreateStereoGroup(enumRDKit, classRDKit, classboost) -> Any: ...
def GetAtomAlias(classRDKit) -> Any: ...
def GetAtomRLabel(classRDKit) -> Any: ...
def GetAtomValue(classRDKit) -> Any: ...
def GetDefaultPickleProperties() -> Any: ...
def GetMolSubstanceGroupWithIdx(classRDKit, unsignedint) -> Any: ...
def GetMolSubstanceGroups(classRDKit) -> Any: ...
def GetPeriodicTable() -> Any: ...
def GetSupplementalSmilesLabel(classRDKit) -> Any: ...
def SetAtomAlias(*args, **kwargs) -> Any: ...
def SetAtomRLabel(classRDKit, int) -> Any: ...
def SetAtomValue(*args, **kwargs) -> Any: ...
def SetDefaultPickleProperties(unsignedint) -> Any: ...
def SetSupplementalSmilesLabel(*args, **kwargs) -> Any: ...
def _HasSubstructMatchStr(*args, **kwargs) -> Any: ...
def tossit() -> Any: ...
