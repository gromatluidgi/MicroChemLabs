from typing import Any, ClassVar

from typing import overload
import Boost.Python
import controls whether or not the legacy stereochemistry perception code is used

class CXSmilesFields(Boost.Python.enum):
    CX_ALL: ClassVar[CXSmilesFields] = ...
    CX_ATOM_LABELS: ClassVar[CXSmilesFields] = ...
    CX_ATOM_PROPS: ClassVar[CXSmilesFields] = ...
    CX_COORDS: ClassVar[CXSmilesFields] = ...
    CX_ENHANCEDSTEREO: ClassVar[CXSmilesFields] = ...
    CX_LINKNODES: ClassVar[CXSmilesFields] = ...
    CX_MOLFILE_VALUES: ClassVar[CXSmilesFields] = ...
    CX_NONE: ClassVar[CXSmilesFields] = ...
    CX_POLYMER: ClassVar[CXSmilesFields] = ...
    CX_RADICALS: ClassVar[CXSmilesFields] = ...
    CX_SGROUPS: ClassVar[CXSmilesFields] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class ForwardSDMolSupplier(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetEOFHitOnRead(cls, class `anonymousnamespace') -> Any: ...
    @classmethod
    def GetProcessPropertyLists(cls, class `anonymousnamespace') -> Any: ...
    @classmethod
    def SetProcessPropertyLists(cls, class `anonymousnamespace', bool) -> Any: ...
    @classmethod
    def atEnd(cls, class `anonymousnamespace') -> Any: ...
    @classmethod
    def __enter__(cls) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __iter__(cls) -> Any: ...
    @classmethod
    def __next__(cls, class `anonymousnamespace') -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MaeMolSupplier(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def atEnd(cls, class `anonymousnamespace') -> Any: ...
    @classmethod
    def __enter__(cls) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __iter__(cls) -> Any: ...
    @classmethod
    def __next__(cls, class `anonymousnamespace') -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MultithreadedSDMolSupplier(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetLastItemText(cls, classRDKit) -> Any: ...
    @classmethod
    def GetLastRecordId(cls, classRDKit) -> Any: ...
    @classmethod
    def GetProcessPropertyLists(cls, classRDKit) -> Any: ...
    @classmethod
    def SetProcessPropertyLists(cls, classRDKit, bool) -> Any: ...
    @classmethod
    def atEnd(cls, classRDKit) -> Any: ...
    @classmethod
    def __enter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __iter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __next__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MultithreadedSmilesMolSupplier(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetLastItemText(cls, classRDKit) -> Any: ...
    @classmethod
    def GetLastRecordId(cls, classRDKit) -> Any: ...
    @classmethod
    def atEnd(cls, classRDKit) -> Any: ...
    @classmethod
    def __enter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __iter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __next__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class PDBWriter(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def NumMols(cls, classRDKit) -> Any: ...
    @classmethod
    def close(cls, classRDKit) -> Any: ...
    @classmethod
    def flush(cls, classRDKit) -> Any: ...
    @classmethod
    def write(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __enter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class SDMolSupplier(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetItemText(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def GetProcessPropertyLists(cls, classRDKit) -> Any: ...
    @classmethod
    def SetData(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetProcessPropertyLists(cls, classRDKit, bool) -> Any: ...
    @classmethod
    def _SetStreamIndices(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def atEnd(cls, classRDKit) -> Any: ...
    @classmethod
    def reset(cls, classRDKit) -> Any: ...
    @classmethod
    def __enter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __getitem__(cls, classRDKit, int) -> Any: ...
    @classmethod
    def __iter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __len__(cls, classRDKit) -> Any: ...
    @classmethod
    def __next__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class SDWriter(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetForceV3000(cls, classRDKit) -> Any: ...
    @classmethod
    def GetKekulize(cls, classRDKit) -> Any: ...
    def GetText(self, *args, **kwargs) -> Any: ...
    @classmethod
    def NumMols(cls, classRDKit) -> Any: ...
    @classmethod
    def SetForceV3000(cls, classRDKit, bool) -> Any: ...
    @classmethod
    def SetKekulize(cls, classRDKit, bool) -> Any: ...
    @classmethod
    def SetProps(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def close(cls, classRDKit) -> Any: ...
    @classmethod
    def flush(cls, classRDKit) -> Any: ...
    @classmethod
    def write(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __enter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class SmartsParserParams(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    allowCXSMILES: Any
    debugParse: Any
    mergeHs: Any
    parseName: Any
    strictCXSMILES: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class SmilesMolSupplier(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetItemText(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetData(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def reset(cls, classRDKit) -> Any: ...
    @classmethod
    def __enter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __getitem__(cls, classRDKit, int) -> Any: ...
    @classmethod
    def __iter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __len__(cls, classRDKit) -> Any: ...
    @classmethod
    def __next__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class SmilesParserParams(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    allowCXSMILES: Any
    debugParse: Any
    parseName: Any
    removeHs: Any
    sanitize: Any
    strictCXSMILES: Any
    useLegacyStereo: controls whether or not the legacy stereochemistry perception code is used. DEPRECATED
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class SmilesWriteParams(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    allBondsExplicit: Any
    allHsExplicit: Any
    canonical: Any
    doIsomericSmiles: Any
    doKekule: Any
    doRandom: Any
    rootedAtAtom: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class SmilesWriter(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def NumMols(cls, classRDKit) -> Any: ...
    @classmethod
    def SetProps(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def close(cls, classRDKit) -> Any: ...
    @classmethod
    def flush(cls, classRDKit) -> Any: ...
    @classmethod
    def write(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __enter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class TDTMolSupplier(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetItemText(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetData(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def reset(cls, classRDKit) -> Any: ...
    @classmethod
    def __enter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __getitem__(cls, classRDKit, int) -> Any: ...
    @classmethod
    def __iter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __len__(cls, classRDKit) -> Any: ...
    @classmethod
    def __next__(cls, classRDKit) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class TDTWriter(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def GetNumDigits(cls, classRDKit) -> Any: ...
    @classmethod
    def GetWrite2D(cls, classRDKit) -> Any: ...
    @classmethod
    def GetWriteNames(cls, classRDKit) -> Any: ...
    @classmethod
    def NumMols(cls, classRDKit) -> Any: ...
    @classmethod
    def SetNumDigits(cls, classRDKit, unsignedint) -> Any: ...
    @classmethod
    def SetProps(cls, classRDKit, classboost) -> Any: ...
    @classmethod
    def SetWrite2D(cls, classRDKit) -> Any: ...
    @classmethod
    def SetWriteNames(cls, classRDKit) -> Any: ...
    @classmethod
    def close(cls, classRDKit) -> Any: ...
    @classmethod
    def flush(cls, classRDKit) -> Any: ...
    @classmethod
    def write(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __enter__(cls, classRDKit) -> Any: ...
    @classmethod
    def __exit__(cls, type, value, traceback) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

def AddMetadataToPNGFile(*args, **kwargs) -> Any: ...
def AddMetadataToPNGString(*args, **kwargs) -> Any: ...
def AtomFromSmarts(*args, **kwargs) -> Any: ...
def AtomFromSmiles(*args, **kwargs) -> Any: ...
def BondFromSmarts(*args, **kwargs) -> Any: ...
def BondFromSmiles(*args, **kwargs) -> Any: ...
@overload
def CanonicalRankAtoms(mol, breakTies = ...) -> Any: ...
@overload
def CanonicalRankAtoms(classRDKit) -> Any: ...
@overload
def CanonicalRankAtomsInFragment(mol, atomsToUse = ..., breakTies = ...) -> Any: ...
@overload
def CanonicalRankAtomsInFragment(mol, atomsToUse = ..., breakTies = ...) -> Any: ...
@overload
def CanonicalRankAtomsInFragment(classRDKit, classboost) -> Any: ...
def CreateAtomBoolPropertyList(*args, **kwargs) -> Any: ...
def CreateAtomDoublePropertyList(*args, **kwargs) -> Any: ...
def CreateAtomIntPropertyList(*args, **kwargs) -> Any: ...
def CreateAtomStringPropertyList(*args, **kwargs) -> Any: ...
def MetadataFromPNGFile(classboost) -> Any: ...
def MetadataFromPNGString(classboost) -> Any: ...
def MolFragmentToCXSmarts(classRDKit, classboost) -> Any: ...
@overload
def MolFragmentToCXSmiles(classRDKit, structRDKit, classboost) -> Any: ...
@overload
def MolFragmentToCXSmiles(classRDKit, classboost) -> Any: ...
def MolFragmentToSmarts(classRDKit, classboost) -> Any: ...
@overload
def MolFragmentToSmiles(classRDKit, structRDKit, classboost) -> Any: ...
@overload
def MolFragmentToSmiles(classRDKit, classboost) -> Any: ...
def MolFromFASTA(*args, **kwargs) -> Any: ...
def MolFromHELM(classboost) -> Any: ...
def MolFromMol2Block(*args, **kwargs) -> Any: ...
def MolFromMol2File(*args, **kwargs) -> Any: ...
@overload
def MolFromMolBlock(classboost) -> Any: ...
@overload
def MolFromMolBlock(classboost) -> Any: ...
def MolFromMolFile(*args, **kwargs) -> Any: ...
def MolFromPDBBlock(classboost) -> Any: ...
def MolFromPDBFile(*args, **kwargs) -> Any: ...
def MolFromPNGFile(*args, **kwargs) -> Any: ...
def MolFromPNGString(classboost) -> Any: ...
def MolFromRDKitSVG(classboost) -> Any: ...
def MolFromSequence(classboost) -> Any: ...
@overload
def MolFromSmarts(classboost) -> Any: ...
@overload
def MolFromSmarts(classboost, structRDKit) -> Any: ...
def MolFromSmiles(*args, **kwargs) -> Any: ...
def MolFromTPLBlock(classboost) -> Any: ...
def MolFromTPLFile(*args, **kwargs) -> Any: ...
def MolFromXYZBlock(classboost) -> Any: ...
def MolFromXYZFile(*args, **kwargs) -> Any: ...
def MolMetadataToPNGFile(classRDKit, classboost) -> Any: ...
def MolMetadataToPNGString(classRDKit, classboost) -> Any: ...
def MolToCMLBlock(classRDKit) -> Any: ...
def MolToCMLFile(*args, **kwargs) -> Any: ...
def MolToCXSmarts(classRDKit) -> Any: ...
@overload
def MolToCXSmiles(classRDKit, structRDKit) -> Any: ...
@overload
def MolToCXSmiles(classRDKit) -> Any: ...
def MolToFASTA(classRDKit) -> Any: ...
def MolToHELM(classRDKit) -> Any: ...
def MolToMolBlock(classRDKit) -> Any: ...
def MolToMolFile(*args, **kwargs) -> Any: ...
def MolToPDBBlock(classRDKit) -> Any: ...
def MolToPDBFile(*args, **kwargs) -> Any: ...
def MolToRandomSmilesVect(*args, **kwargs) -> Any: ...
def MolToSequence(classRDKit) -> Any: ...
def MolToSmarts(classRDKit) -> Any: ...
@overload
def MolToSmiles(classRDKit, structRDKit) -> Any: ...
@overload
def MolToSmiles(classRDKit) -> Any: ...
def MolToTPLBlock(classRDKit) -> Any: ...
def MolToTPLFile(*args, **kwargs) -> Any: ...
def MolToV3KMolBlock(classRDKit) -> Any: ...
def MolToV3KMolFile(*args, **kwargs) -> Any: ...
def MolToXYZBlock(classRDKit) -> Any: ...
def MolToXYZFile(*args, **kwargs) -> Any: ...
def MolsFromCDXML(classboost) -> Any: ...
def MolsFromCDXMLFile(*args, **kwargs) -> Any: ...
def MolsFromPNGFile(*args, **kwargs) -> Any: ...
def MolsFromPNGString(classboost) -> Any: ...
def SmilesMolSupplierFromText(*args, **kwargs) -> Any: ...
