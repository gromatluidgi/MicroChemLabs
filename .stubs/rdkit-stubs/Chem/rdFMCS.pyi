from typing import Any, ClassVar

from typing import overload
import Boost.Python

class AtomCompare(Boost.Python.enum):
    CompareAny: ClassVar[AtomCompare] = ...
    CompareAnyHeavyAtom: ClassVar[AtomCompare] = ...
    CompareElements: ClassVar[AtomCompare] = ...
    CompareIsotopes: ClassVar[AtomCompare] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class BondCompare(Boost.Python.enum):
    CompareAny: ClassVar[BondCompare] = ...
    CompareOrder: ClassVar[BondCompare] = ...
    CompareOrderExact: ClassVar[BondCompare] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class MCSAtomCompare(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def CheckAtomCharge(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def CheckAtomChirality(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def CheckAtomRingMatch(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def compare(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __call__(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MCSAtomCompareParameters(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    CompleteRingsOnly: Any
    MatchChiralTag: Any
    MatchFormalCharge: Any
    MatchIsotope: Any
    MatchValences: Any
    MaxDistance: Any
    RingMatchesRingOnly: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MCSBondCompare(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def CheckBondRingMatch(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def CheckBondStereo(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def compare(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __call__(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MCSBondCompareParameters(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    CompleteRingsOnly: Any
    MatchFusedRings: Any
    MatchFusedRingsStrict: Any
    MatchStereo: Any
    RingMatchesRingOnly: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MCSParameters(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    AtomCompareParameters: Any
    AtomTyper: Any
    BondCompareParameters: Any
    BondTyper: Any
    InitialSeed: Any
    MaximizeBonds: Any
    ProgressCallback: Any
    Threshold: Any
    Timeout: Any
    Verbose: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def SetAtomTyper(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def SetBondTyper(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MCSProgress(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def callback(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __call__(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class MCSProgressData(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @property
    def numAtoms(self) -> Any: ...
    @property
    def numBonds(self) -> Any: ...
    @property
    def seedProcessed(self) -> Any: ...

class MCSResult(Boost.Python.instance):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @property
    def canceled(self) -> Any: ...
    @property
    def numAtoms(self) -> Any: ...
    @property
    def numBonds(self) -> Any: ...
    @property
    def queryMol(self) -> Any: ...
    @property
    def smartsString(self) -> Any: ...

class RingCompare(Boost.Python.enum):
    IgnoreRingFusion: ClassVar[RingCompare] = ...
    PermissiveRingFusion: ClassVar[RingCompare] = ...
    StrictRingFusion: ClassVar[RingCompare] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

@overload
def FindMCS(classboost) -> Any: ...
@overload
def FindMCS(classboost, classRDKit) -> Any: ...
