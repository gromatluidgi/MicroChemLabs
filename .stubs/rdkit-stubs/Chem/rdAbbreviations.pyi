from typing import Any, ClassVar

import Boost.Python

class AbbreviationDefinition(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    displayLabel: Any
    displayLabelW: Any
    label: Any
    mol: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class _vectstruct RDKit::Abbreviations::AbbreviationDefinition(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def append(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(cls, other) -> Any: ...
    @classmethod
    def __delitem__(cls, other) -> Any: ...
    @classmethod
    def __getitem__(cls, index) -> Any: ...
    @classmethod
    def __iter__(cls, structboost, classstd) -> Any: ...
    @classmethod
    def __len__(cls) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...
    @classmethod
    def __setitem__(cls, index, object) -> Any: ...

def CondenseAbbreviationSubstanceGroups(classRDKit) -> Any: ...
def CondenseMolAbbreviations(classRDKit, classboost) -> Any: ...
def GetDefaultAbbreviations() -> Any: ...
def GetDefaultLinkers() -> Any: ...
def LabelMolAbbreviations(classRDKit, classboost) -> Any: ...
def ParseAbbreviations(*args, **kwargs) -> Any: ...
def ParseLinkers(*args, **kwargs) -> Any: ...
