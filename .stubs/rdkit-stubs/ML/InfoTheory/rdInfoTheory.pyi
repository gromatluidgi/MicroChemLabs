from typing import Any, ClassVar

import Boost.Python
BIASCHISQUARE: InfoType
BIASENTROPY: InfoType
CHISQUARE: InfoType
ENTROPY: InfoType

class BitCorrMatGenerator(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def CollectVotes(cls, classRDInfoTheory, classboost) -> Any: ...
    @classmethod
    def GetCorrMatrix(cls, classRDInfoTheory) -> Any: ...
    @classmethod
    def SetBitList(cls, classRDInfoTheory, classboost) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class InfoBitRanker(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def AccumulateVotes(cls, classRDInfoTheory, classboost, int) -> Any: ...
    @classmethod
    def GetTopN(cls, classRDInfoTheory, int) -> Any: ...
    @classmethod
    def SetBiasList(cls, classRDInfoTheory, classboost) -> Any: ...
    @classmethod
    def SetMaskBits(cls, classRDInfoTheory, classboost) -> Any: ...
    @classmethod
    def Tester(cls, classRDInfoTheory, classboost) -> Any: ...
    @classmethod
    def WriteTopBitsToFile(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

class InfoType(Boost.Python.enum):
    BIASCHISQUARE: ClassVar[InfoType] = ...
    BIASENTROPY: ClassVar[InfoType] = ...
    CHISQUARE: ClassVar[InfoType] = ...
    ENTROPY: ClassVar[InfoType] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

def ChiSquare(classboost) -> Any: ...
def InfoEntropy(classboost) -> Any: ...
def InfoGain(classboost) -> Any: ...
