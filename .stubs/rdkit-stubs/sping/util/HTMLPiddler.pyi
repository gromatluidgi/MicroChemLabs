from types import *
import htmllib
from _typeshed import Incomplete

TRACE: int

class HTMLPiddler:
    html: Incomplete
    start: Incomplete
    xLimits: Incomplete
    font: Incomplete
    color: Incomplete
    def __init__(self, html: str = ..., start=..., xLimits=..., font: Incomplete | None = ..., color: Incomplete | None = ...) -> None: ...
    def renderOn(self, aPiddleCanvas) -> None: ...

class _HtmlParser(htmllib.HTMLParser):
    def anchor_bgn(self, href, name, type) -> None: ...
    def anchor_end(self) -> None: ...

class _HtmlPiddleWriter:
    FontSizeDict: Incomplete
    DefaultFontSize: int
    piddler: Incomplete
    pc: Incomplete
    anchor: Incomplete
    lineHeight: int
    atbreak: int
    color: Incomplete
    defaultFont: Incomplete
    fsizex: Incomplete
    fsizey: Incomplete
    indentSize: Incomplete
    indent: Incomplete
    def __init__(self, aHTMLPiddler, aPiddleCanvas) -> None: ...
    oldcolor: Incomplete
    def anchor_bgn(self, href, name, type) -> None: ...
    def anchor_end(self) -> None: ...
    font: Incomplete
    def new_font(self, fontParams) -> None: ...
    def new_margin(self, margin, level) -> None: ...
    def new_spacing(self, spacing) -> None: ...
    def new_styles(self, styles) -> None: ...
    def send_label_data(self, data) -> None: ...
    y: Incomplete
    def send_paragraph(self, blankline) -> None: ...
    oldLineHeight: Incomplete
    x: Incomplete
    def send_line_break(self) -> None: ...
    def send_hor_rule(self) -> None: ...
    def send_literal_data(self, data) -> None: ...
    def send_flowing_data(self, data) -> None: ...
    def OutputLine(self, text, linebreak: int = ...) -> None: ...

__copyrite_jim__: str
DEMO_HTML: str

def demoPDF(html) -> None: ...
def demoPIL(html) -> None: ...
def demoTK(html) -> None: ...
def demoWX(html) -> None: ...
def demo(html=...) -> None: ...
